#include<conio.h>
#include<stdio.h>
#include<stdlib.h>
struct node
{
int key;
struct node *left;
struct node *right;
int height;//we need balance factor not more than mod of 1

};

 int Max(int a, int b)
 {
  return(a>b)?a:b;
 }

int height(struct node *n)
{
 if(n==NULL)
   return 0;
 return 1+max(height(n->left),height(n->right));

}


struct node *newnode(int key)
{
      struct node* node=(struct node*)malloc(sizeof(struct node));

      node->key = key;
      node->left = NULL;
      node->right = NULL;
      node->height = 0;
      return (node);
}




struct node *rightrotate(struct node *y)
{
    struct node *x  = y->left;
    struct node *t2 = x->right;
    x->right =y;
    y->left =t2;
    y->height= height(y);
    x->height= height(x);

  return x;

}


struct node* leftrotate(struct node *x)
{
    struct node *y  = x->right;
    struct node *t2 = y->left;


    y->left =x;
    x->right =t2;

    y->height = height(y);
    x->height = height(x);

  return y;

}
int getbalance(struct node *n)
{
 if(n==NULL)

   return 0;
   return height(n->left) - height(n->right);

}

struct node *insert(struct node *node,int key)
{
   int balance;
 if(node==NULL)
    return(newnode(key));

    if(key<node->key)
      node->left= insert (node->left,key);
   else if(key>node->key)
	node->right=insert(node->right,key);
   else
     return node;
     node->height = height(node);
      balance= getbalance(node);
      //left left
      if(balance>1 && key<node->left->key)
      return rightrotate(node);

      //right right
	if(balance<-1 && key > node->right->key)
	  return leftrotate(node);

      //left right
	if(balance>1 && key > node->left->key)
      {
	node->left=leftrotate(node->left);
	return rightrotate(node);
      }

      // right left

	if(balance<-1 && key<node->right->key)
      {
       node->right=rightrotate(node->right);
       return leftrotate(node);

      }
      return node;
}
void preorder(struct node *root)
{
if(root!=NULL)
{
 printf("%d",root->key);
 preorder(root->left);
 preorder(root->right);

 }
}


int main()
{

 struct node *root=NULL;
 root = insert(root,1);
 root = insert(root,7);
 root = insert(root,4);
 root = insert(root,8);
 root = insert(root,6);
 root = insert(root,5);

 printf("preorder traversal :");
preorder(root);
 getch();
 return 0;
}


































